=============================================================================
List of generated methods in project: bootloader_byte_beam_nxp_s32k144

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetMuxModeSel -This function configures the pin muxing
   - pin_mux_PINS_DRV_SetPinIntSel -This function configures the port pin interrupt/DMA request
   - pin_mux_PINS_DRV_GetPinIntSel -This function gets the current port pin interrupt/DMA request configuration
   - pin_mux_PINS_DRV_ClearPinIntFlagCmd -This function clears the individual pin-interrupt status flag
   - pin_mux_PINS_DRV_EnableDigitalFilter -This function enables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_DisableDigitalFilter -This function disables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_ConfigDigitalFilter -This function configures digital filter for port with given configuration
   - pin_mux_PINS_DRV_GetPortIntFlag -This function reads the entire port interrupt status flag
   - pin_mux_PINS_DRV_ClearPortIntFlagCmd -This function clears the entire port interrupt status flag
   - pin_mux_PINS_DRV_SetGlobalPinControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same pin configuration
   - pin_mux_PINS_DRV_SetGlobalIntControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same interrupt configuration
   - pin_mux_PINS_DRV_GetPinsDirection -This function returns the current pins directions for a port. Pins corresponding to 
                bits with value of '1' are configured as output and pins corresponding to bits with value of '0' are configured 
                as input.
   - pin_mux_PINS_DRV_SetPinDirection -This function configures the direction for the given pin, with the given value('1' for 
                pin to be configured as output and '0' for pin to be configured as input)
   - pin_mux_PINS_DRV_SetPinsDirection -This function sets the direction configuration for all pins in a port. Pins 
                corresponding to bits with value of '1' will be configured as output and pins corresponding to bits with value 
                of '0' will be configured as input.
   - pin_mux_PINS_DRV_SetPortInputDisable -This function sets the pins input state for a port. Pins corresponding to bits with 
                value of '1' will not be configured as input and pins corresponding to bits with value of '0' will be 
                configured as input
   - pin_mux_PINS_DRV_GetPortInputDisable -This function returns the current pins input state for a port. Pins corresponding to 
                bits with value of '1' are not configured as input and pins corresponding to bits with value of '0' are 
                configured as input
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.
   - clockMan1_CLOCK_DRV_SetModuleClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_SetSystemClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_GetSystemClockSource -Gets the system clock source.
   - clockMan1_CLOCK_DRV_SetClockSource -This function configures a clock source.

Module "uart_pal1" (component uart_pal)
   - uart_pal1_UART_GetDefaultConfig -Gets the default configuration structure.
   - uart_pal1_UART_Init -Initializes the uart module.
   - uart_pal1_UART_Deinit -De-initializes the uart module.
   - uart_pal1_UART_SetBaudRate -Configures the UART baud rate.
   - uart_pal1_UART_GetBaudRate -Returns the UART baud rate.
   - uart_pal1_UART_SendDataBlocking -Perform a blocking UART transmission.
   - uart_pal1_UART_SendData -Perform a non-blocking UART transmission.
   - uart_pal1_UART_AbortSendingData -Terminates a non-blocking transmission early.
   - uart_pal1_UART_GetTransmitStatus -Get the status of the current non-blocking UART transmission.
   - uart_pal1_UART_ReceiveDataBlocking -Perform a blocking UART reception.
   - uart_pal1_UART_ReceiveData -Perform a non-blocking UART reception.
   - uart_pal1_UART_AbortReceivingData -Terminates a non-blocking reception early.
   - uart_pal1_UART_GetReceiveStatus -Get the status of the current non-blocking UART reception.
   - uart_pal1_UART_SetRxBuffer -Provide a buffer for receiving data.
   - uart_pal1_UART_SetTxBuffer -Provide a buffer for transmitting data.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the channel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the channel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the channel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current channel.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.
   - intMan1_INT_SYS_GetActive -Get Active Interrupt.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "timing_pal1" (component timing_pal)
   - timing_pal1_TIMING_Init -Initialize the timer instance and timer channels with value from input configuration structure
   - timing_pal1_TIMING_Deinit -De-initialize a timer instance
   - timing_pal1_TIMING_StartChannel -Starts the timer channel counting
   - timing_pal1_TIMING_StopChannel -Stop the timer channel counting
   - timing_pal1_TIMING_GetElapsed -Get elapsed ticks
   - timing_pal1_TIMING_GetRemaining -Get remaining ticks
   - timing_pal1_TIMING_EnableNotification -Enable channel notifications
   - timing_pal1_TIMING_DisableNotification -Disable channel notifications
   - timing_pal1_TIMING_GetResolution -Get tick resolution
   - timing_pal1_TIMING_GetMaxPeriod -Get max period in engineering units
   - timing_pal1_TIMING_InstallCallback -Install new callback function and callback parameter for timer channel

Module "can_pal1"  (component can_pal)
   - can_pal1_CAN_Init -Initializes the CAN module.
   - can_pal1_CAN_Deinit -De-initializes the CAN module.
   - can_pal1_CAN_SetBitrate -Configures the CAN bitrate.
   - can_pal1_CAN_GetBitrate -Returns the CAN bitrate.
   - can_pal1_CAN_ConfigTxBuff -Configures a buffer for transmission.
   - can_pal1_CAN_ConfigRemoteResponseBuff -Configures a transmit message buffer for remote frame response.
   - can_pal1_CAN_ConfigRxBuff -Configures a buffer for reception.
   - can_pal1_CAN_Send -Sends a CAN frame using the specified buffer.
   - can_pal1_CAN_SendBlocking -Sends a CAN frame using the specified buffer, in a blocking manner.
   - can_pal1_CAN_Receive -Receives a CAN frame using the specified message buffer.
   - can_pal1_CAN_ReceiveBlocking -Receives a CAN frame using the specified buffer, in a blocking manner.
   - can_pal1_CAN_AbortTransfer -Ends a non-blocking CAN transfer early.
   - can_pal1_CAN_SetRxFilter -Configures an ID filter for a specific reception buffer.
   - can_pal1_CAN_GetTransferStatus -Returns the state of the previous CAN transfer.
   - can_pal1_CAN_InstallEventCallback -Installs a callback function for the IRQ handler.
   - can_pal1_CAN_GetDefaultConfig -Returns the default values for the CAN module.

Module "pwrMan1"   (component power_manager)
   - pwrMan1_POWER_SYS_Init -Power manager initialization for operation.
   - pwrMan1_POWER_SYS_Deinit -This function deinitializes the Power manager.
   - pwrMan1_POWER_SYS_SetMode -This function configures the power mode.
   - pwrMan1_POWER_SYS_GetLastMode -This function returns the last successfully set power mode.
   - pwrMan1_POWER_SYS_GetLastModeConfig -This function returns the user configuration structure of the last successfully set 
                power mode.
   - pwrMan1_POWER_SYS_GetCurrentMode -This function returns currently running power mode.
   - pwrMan1_POWER_SYS_GetErrorCallbackIndex -This function returns the last failed notification callback.
   - pwrMan1_POWER_SYS_GetErrorCallback -This function returns the callback configuration structure for the last failed 
                notification.
   - pwrMan1_POWER_SYS_GetDefaultConfig -This function gets the power_manager configuration structure of the default power mode.
   - pwrMan1_POWER_SYS_GetResetSrcStatusCmd -This function gets the current reset source status for specified source.

Module "Flash1"    (component flash)
   - Flash1_FLASH_DRV_Init -Flash initialization.
   - Flash1_FLASH_DRV_GetPFlashProtection -P-Flash get protection.
   - Flash1_FLASH_DRV_SetPFlashProtection -P-Flash set protection.
   - Flash1_FLASH_DRV_GetSecurityState -Flash get security state.
   - Flash1_FLASH_DRV_SecurityBypass -Flash security bypass.
   - Flash1_FLASH_DRV_EraseAllBlock -Flash erase all Blocks.
   - Flash1_FLASH_DRV_VerifyAllBlock -Flash verify all Blocks.
   - Flash1_FLASH_DRV_EraseSector -Flash erase sector.
   - Flash1_FLASH_DRV_VerifySection -Flash verify sector.
   - Flash1_FLASH_DRV_EraseSuspend -Flash erase suspend.
   - Flash1_FLASH_DRV_EraseResume -Flash erase resume.
   - Flash1_FLASH_DRV_ReadOnce -Flash read once.
   - Flash1_FLASH_DRV_ProgramOnce -Flash program once.
   - Flash1_FLASH_DRV_Program -Flash program.
   - Flash1_FLASH_DRV_ProgramCheck -Flash program check.
   - Flash1_FLASH_DRV_CheckSum -Calculate check sum.
   - Flash1_FLASH_DRV_ProgramSection -Flash program section.
   - Flash1_FLASH_DRV_EraseBlock -Flash erase block.
   - Flash1_FLASH_DRV_VerifyBlock -Flash verify block.
   - Flash1_FLASH_DRV_GetEERAMProtection -EERAM get protection.
   - Flash1_FLASH_DRV_SetEERAMProtection -EERAM set protection.
   - Flash1_FLASH_DRV_SetFlexRamFunction -Flash Set FlexRam function command.
   - Flash1_FLASH_DRV_EEEWrite -EEPROM Emulator Write.
   - Flash1_FLASH_DRV_DEFlashPartition -Flash D/E-Flash Partition.
   - Flash1_FLASH_DRV_GetDFlashProtection -D-Flash get protection.
   - Flash1_FLASH_DRV_SetDFlashProtection -D-Flash set protection.
   - Flash1_FLASH_DRV_PFlashSwap -swap between the two half of total logical P-Flash memory blocks within the memory map
   - Flash1_FLASH_DRV_PFlashSwapCtl -implements swap control command corresponding with swap control code provided via swapcmd 
                parameter
   - Flash1_FLASH_DRV_EraseAllBlockUnsecure -Flash erase all Blocks.
   - Flash1_FLASH_DRV_EnableCmdCompleteInterupt -Enable the command complete interrupt.
   - Flash1_FLASH_DRV_DisableCmdCompleteInterupt -Disable the command complete interrupt.
   - Flash1_FLASH_DRV_GetCmdCompleteFlag -Check the command complete flag has completed or not.
   - Flash1_FLASH_DRV_EnableReadColisionInterupt -Enable the read collision error interrupt.
   - Flash1_FLASH_DRV_DisableReadColisionInterupt -Disable the read collision error interrupt.
   - Flash1_FLASH_DRV_GetReadColisionFlag -Check the read collision error flag is detected or not.
   - Flash1_FLASH_DRV_ClearReadColisionFlag -Clear the read collision error flag.
   - Flash1_FLASH_DRV_EnableDoubleBitFaultInterupt -Enable the double bit fault detect interrupt.
   - Flash1_FLASH_DRV_DisableDoubleBitFaultInterupt -Disable the double bit fault detect interrupt.
   - Flash1_FLASH_DRV_GetDoubleBitFaultFlag -Check the double bit fault flag is detected or not.
   - Flash1_FLASH_DRV_ClearDoubleBitFaultFlag -Clear the double bit fault detect flag.
   - Flash1_FLASH_DRV_ForceDoubleBitFaultDetectCmd -Force Double Bit Fault Detect.
   - Flash1_FLASH_DRV_GetDefaultConfig -Get default flash user configuration.

Module "Cpu"       (component S32K144_48)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
